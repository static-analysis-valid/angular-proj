


name: COPY LINT PR

on:
  push: 
    branches: [ main, master, develop, release/* ]
  pull_request:
    branches: [ main, master, develop, release/*, "*"]

jobs:
  changedfiles:
    runs-on: ubuntu-latest
    
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2
        
        
      # TODO: Don't want to run Node Setup if no modified files (e.g. ts, scss,..) 
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

        
      - name: Install dependency
        run: cd app && npm ci     
   
        
      # 3rd party lib get changed files from PR
      # returns added, modified & removed files 
      - name: Get file changes
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.3 # https://github.com/marketplace/actions/file-changes-action
        with:
          output: ' ' # output as a text 
          
      - name: Echo file changes
        id: hello
        run: |
              echo Added files: ${{ steps.get_file_changes.outputs.files_added }}
              echo Changed files: ${{ steps.get_file_changes.outputs.files_modified }} 
              echo Removed files: ${{ steps.get_file_changes.outputs.files_removed }} 
      
      
      - name: find files
        run: |
          FILES=(${{ steps.get_file_changes.outputs.files_added }} ${{ steps.get_file_changes.outputs.files_modified }})
          CHANGED_TS_FILES=$(printf -- '%s\n' "${FILES[@]}" | grep \.ts$ | tr '\n' ' ')
          echo "TS_FILES=$CHANGED_TS_FILES"  >> $GITHUB_ENV
          
          CHANGED_SCSS_FILES=$(printf -- '%s\n' "${FILES[@]}" | grep \.scss$ | tr '\n' ' ')
          echo "SCSS_FILES=$CHANGED_SCSS_FILES" >>  $GITHUB_ENV
          

      


      


        
      # Run TS linter on changed files using the settings configured in the 
      - name: StyleLint Checking
        if: env.SCSS_FILES
        # Usage: stylelint [input] [options]
        # run: $(git rev-parse --show-toplevel)/app/node_modules/.bin/stylelint --format json $SCSS_FILES
        
        #run: LINT_ISSUES="Multiline string here"
        run: |
          echo Parse output: $(git rev-parse --show-toplevel)/app/node_modules/.bin/stylelint $SCSS_FILES 
          LINT_ISSUES="$($(git rev-parse --show-toplevel)/app/node_modules/.bin/stylelint -f json $SCSS_FILES)"
          
          # jq [options] <jq filter> [file...]
          # echo first result:  $LINT_ISSUES | jq '. [0]'
           
          # https://www.baeldung.com/linux/jq-command-json#1-prettify-json
          # | @base64 - get rid of whitespaces and new lines 
          JQ_ISSUE="$(echo $LINT_ISSUES | jq '. [0] | [.warnings[]] ' )"
          # echo jq Issues: $JQ_ISSUE | jq '.'    
          
          
     
          # loop warnings 
          for row in $(echo $JQ_ISSUE | jq -r '.[] | @base64'); do

            # echo row: ${row}

            echo "${row}" | base64 --decode | jq -r .
            line="${row}" | base64 --decode | jq -r .line
            column="${row}" | base64 --decode | jq -r .column
            text="${row}" | base64 --decode | jq -r .text
            echo "::warning file=app/src/app/app.component.scss,line=11,col=$column::$text"



            # text=${row} | base64 --decode | jq -r .

          done
          
         
    
          
          # echo "::warning file=app/src/app/app.component.scss,line=11,col=5::$text"          
          echo "STYLE_LINT_ISSUES=$LINT_ISSUES" >> $GITHUB_ENV




      - name: Generate Error Annotations
        run: |
          text=$STYLE_LINT_ISSUES
          echo "STYLE files with issues: $STYLE_LINT_ISSUES"
          echo "::warning file=app/src/app/app.component.scss,line=11,col=5::$text"






