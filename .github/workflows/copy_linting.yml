
# Cache value used 
name: COPY LINT PR

on:
  push: 
    branches: [ main, master, develop, release/* ]
  pull_request:
    branches: [ main, master, develop, release/*, "*"]

jobs:
  changedfiles:
    runs-on: ubuntu-latest
    
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2
        
        
      # TODO: Don't want to run Node Setup if no modified files (e.g. ts, scss,..) 
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12


      # CACHE DEPENDENCIES 
      - name: Cache node modules
        id: myCache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        if: steps.myCache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build
        run: npm build




      # - name: Install dependency
      #   run: cd app && npm ci     
   
        
      # 3rd party lib get changed files from PR 
      # returns added, modified & removed files 
      - name: Get file changes
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.3 # https://github.com/marketplace/actions/file-changes-action
        with:
          output: ' ' # output as a text 
          
      - name: Echo file changes
        id: hello
        run: |
              echo Added files: ${{ steps.get_file_changes.outputs.files_added }}
              echo Changed files: ${{ steps.get_file_changes.outputs.files_modified }} 
              echo Removed files: ${{ steps.get_file_changes.outputs.files_removed }} 
      
      
      - name: find files
        run: |
          FILES=(${{ steps.get_file_changes.outputs.files_added }} ${{ steps.get_file_changes.outputs.files_modified }})
         
          CHANGED_TS_FILES=$(printf -- '%s\n' "${FILES[@]}" | grep \.ts$ | tr '\n' ' ')
          echo "TS_FILES=$CHANGED_TS_FILES"  >> $GITHUB_ENV
          
          CHANGED_SCSS_FILES=$(printf -- '%s\n' "${FILES[@]}" | grep \.scss$ | tr '\n' ' ')
          echo "SCSS_FILES=$CHANGED_SCSS_FILES" >>  $GITHUB_ENV
          
      


      



      # Run StyleLinter linter on changed files using the settings configured in the 
      # - name: StyleLint Checking
      #   if: env.SCSS_FILES
      #   # Usage: stylelint [input] [options]        
      #   run: $( git rev-parse --show-toplevel )/app/node_modules/.bin/stylelint $SCSS_FILES 


      # Run Typescript linter on changed files using the settings configured in the 
      - name: Typescript Checking
        if: env.TS_FILES
        # Usage: stylelint [input] [options]        
        run: $( git rev-parse --show-toplevel )/app/node_modules/.bin/tslint $TS_FILES 




      - name: Echo After failed lint
        run: echo Lint here 